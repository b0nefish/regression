		device	zxspectrum128

page128		equ	#7FFD
act128page	equ	#5B5C
mb02ram		equ	#17


		emptytap "REGRESSION.tap"

; BASIC header
		tapout "REGRESSION.tap",0

		db	0
		db	'REGRESSION'
		dw	bas.total + envtotal
		dw	1 ; start line
		dw	bas.total

		tapend

; BASIC block
		tapout "REGRESSION.tap"

	module bas
line1:		db	0, 1
		dw	.len
.cmds		; CLEAR USR (VAL "256"*
		db	#FD, #C0, '(', #B0, '"256"*'
		; PEEK VAL "23636"+
		db	#BE, #B0, '"23636"+'
		; PEEK VAL "23635"+
		db	#BE, #B0, '"23635"+'
		; VAL "44"
		db	#B0, '"44"):'
		; RANDOMIZE USR VAL "x"
		db	#F9, #C0, #B0
	lua ALLPASS
		local val = sj.get_label("loader.begin")
		_pc("	db	'\"" .. val .. "\"'")
	endlua
		; EOL
		db	#0D
.len = $ - .cmds

line2:		db	0, 2
		dw	.len
.cmds		; READ s
		db	#E3, 's:'
		; POKE VAL "23388",s:
		db	#F4, #B0, '"23388",s:'
		; OUT VAL "32765",s:
		db	#DF, #B0, '"32765",s:'
		; LOAD "page"+(STR$ s) CODE:
		db	#EF, '"page"+(', #C1, 's)', #AF, ':'
		; RANDOMIZE USR VAL "x":
		db	#F9, #C0, #B0, '"40000"', ':'
		; IF s <> VAL "23"
		db	#FA, 's', #C9, #B0, '"23"'
		; THEN GO TO VAL "2"
		db	#CB, #EC, #B0, '"2"'
		; EOL
		db	#0D
.len = $ - .cmds

line3:		db	0, 3
		dw	.len
.cmds		; POKE VAL "23388",VAL "16":
		db	#F4, #B0, '"23388",', #B0, '"16":'
		; OUT VAL "32765",VAL "16"
		db	#DF, #B0, '"32765",', #B0, '"16"'
		; EOL
		db	#0D
.len = $ - .cmds

line4:		db	0, 4
		dw	.len
.cmds		; FOR i=NOT PI TO VAL "8":
		db	#EB, 'i=', #C3, #A7, #CC, #B0, '"8":'
		; LOAD "data0"+(STR$ i) CODE:
		db	#EF, '"data0"+(', #C1, 'i)', #AF, ':'
		; RANDOMIZE USR VAL "x":
		db	#F9, #C0, #B0, '"40000"', ':'
		; NEXT i
		db	#F3, 'i'
		; EOL
		db	#0D
.len = $ - .cmds

line5:		db	0, 5
		dw	.len
.cmds		; RANDOMIZE USR VAL "x"
		db	#F9, #C0, #B0, '"40000"'
		; EOL
		db	#0D
.len = $ - .cmds

line9:		db	0, 9
		dw	.len
.cmds		; DATA...
		db	#E4, #B0, '"17",', #B0, '"19",', #B0, '"20",', #B0, '"22",', #B0, '"23"'
		; EOL
		db	#0D
.len = $ - .cmds

total = $ - line1
	endmodule

sign:		db	'R'
		dw	envlen
envstart:

		xor	a
		out	(254),a
		ld	a,7
		ld	(23624),a
		ld	(23693),a
		ld	(23695),a
		ld	a,'o'
		ld	(23739),a

		ld	hl,loader.entry-envstart
		add	hl,bc
		ld	de,loader.begin
		push	de
		ld	bc,loader.length
		ldir

		pop	bc
		dec	bc
		ret

	module loader
entry:
	phase	#6000

begin:		ld	a,#10
		call	xchg.bnk
		ld	hl,screen.lzx
		ld	de,#4000

;; Setting for depacker according to compression identification -tXYoAoB

com	=	5	;; Compression type - one from TYPZX7 TYPBLK TYPBS1
pos	=	6	;; Offset coding - one from POSOF4 POSOF1 POSOF2 POSOFD
ofs1	=	10	;; Number of bits for 1st offset - required for POSOF1 POSOF2 POSOF4
ofs2	=	12	;; Number of bits for 2nd offset - required for POSOF2 only

;; This is needed to set according to compression ID string from name of compressed file:
;;  -tXYoAoB ... means setting  com=X, pos=Y, ofs1=A, ofs2=B   (ofs1 ofs2 only when required)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Set optimization of depacker

spd	=	2

;; Possible values:
;;  0 ... optimized for code length - short but slow
;;  1 ... compromise between length and speed
;;  2+ .. optimized for speed - but longer code

depack56:	include "../kernel/lzx.a80"

xchg.bnk:	ld	(act128page),a
		ld	bc,page128
		out	(c),a
		ret

screen.lzx:	incbin "loading.pak"
	dephase

length = $-entry
	endmodule

envlen = $ - envstart
envtotal = $ - sign

		tapend
