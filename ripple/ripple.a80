		device	zxspectrum128

@DEBUG = 0

		include "../kernel/constants.inc"

;;-----------------------------------------------------------------------------
	macro border n
	  if DEBUG
	    if n > 0
		ld	a,n
	    else
		xor	a
	    endif
		out	(254),a
	  endif
	endm

;;-----------------------------------------------------------------------------

		org	RUNZONE

start:		ei
		ld	a,#15
		call	xchg.bnk

.loop:		ei
		halt
		;call	xchg.vram
		call	render
		jr	.loop


;; ~ RENDER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

render:		ld	a,#44
		ld	hl,xorbuffer
.ptr		ld	de,#0000
		out	(mb02ram),a
		di

.i = 0
	dup 192
		ld	a,(de)
		or	a
		jr	z,$+12
		xor	(hl)
		ld	(hl),a
		exx
.y = (.i & #F0) >> 1
		ld	de,#C000 | (((.y & #C0) | ((.y & #38) >> 3) | ((.y & 7) << 3)) << 5) | (.i & 15)
		call	drawsq
		exx
.i = .i + 1
		inc	de
		inc	l
	edup
		org	$-1
		ld	(.ptr+1),de
		ei
		ld	a,d
		sub	#3F
		ret	nz
		ld	e,a
		ld	d,a
		ld	(.ptr+1),de
		ld	de,render+1
		ld	a,(de)
		inc	a
		ld	(de),a
		cp	#48
		ret	nz
		ld	a,#44
		ld	(de),a
		ret

drawsq:		ld	h,high patterns.tab
		ld	l,a
		ld	a,(hl)
		inc	h
		ld	h,(hl)
		ld	l,a
		ld	(.retsp+1),sp
		ld	sp,hl
		ld	h,d
		ld	l,e
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
		ld	h,d
		ld	a,31
		xor	e
		ld	l,a
		ld	e,a
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
.third		ld	hl,#90FF
		sbc	hl,de
		ld	d,h
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
		ld	h,d
		ld	a,l
		xor	31
		ld	l,a
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
.retsp:		ld	sp,0
		ret

;;-----------------------------------------------------------------------------
		align	256

patterns.gfx	incbin "gfx/patterns.bin"

patterns.tab:
.i = 0
	dup 256
		db	low (patterns.gfx + (.i * 32))
.i = .i + 1
	edup
.i = 0
	dup 256
		db	high (patterns.gfx + (.i * 32))
.i = .i + 1
	edup


xorbuffer:	ds	256

		savebin "final.bin",start,$-start
